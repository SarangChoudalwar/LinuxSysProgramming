Start Date - 30th Sept-2023
End Date - Tentative 31st March - 2023
1. Linux System Programming
    1.1. Programming languages
    1.2. GCC compilation stages
    1.3. GCC compilation optimization
    1.4. Profile guided optimization
    1.5. Bin utils
    1.6. Introduction to Linux
    1.7. Linux filesystem hierarchy
    1.8. x86 Assembly language
    1.9. Arm Assembly language
    1.10. RiscV Assembly language
    1.11. Encryption techniques
    1.12. Linux Binary Analysis
    1.13. ELF analysis.
    1.14. Static library
    1.15. Dynamic library
    1.16. Error handling
    1.17. Asserts
    1.18. Linux process Tracing - ptrace
    1.19. Linux Anti debugging
    1.20. Process management command
    1.21. File operations
    1.22. Profiling
    1.23. Code coverage
    1.24. Doxygen
    1.25. Process management
    1.26. Thread Management
    1.27. IPC
    1.28. Process scheduling
    1.29. Thread Scheduling
    1.30. User and Groups
    1.31. Memory Management
    1.32. OOM Killer
    1.33. Temp Files
    1.34. Timers
    1.35. Fuse
    1.36. Filesystem Type
    1.37. FUSE FAT filesystem
    1.38. Git
    1.39. SED
    1.40. AWK
    1.41. Shell
    1.42. Cmake
    1.43. Makefile
    1.44. CPU isolation
    1.45. CPU Pinning
    1.46. UIO Driver

2.)Linux Kernal Programming
    2.1. Inroduction to Linux Kernal
    2.2. Kernal space and user space
    2.3. Classification of Drivers
    2.4. Linux Kernal versioning
    2.5. Linux Kernal source tree
    2.6. Configuring Kernal
    2.7. Boot Sequence
    2.8. Rootfs
    2.9. Initramfs
    2.10. Startup init program
    2.11. Storage Strategy
    2.13. UML Kernal
    2.14. Qemu Kernal
    2.15. syscalls
    2.16. Kernal helper functions
    2.17. Kernal logs
    2.18. Printk
    2.19. Module Programming
    2.20. Export Symbols
    2.21. procfts,sysfs,debugfs, and seqfile
    2.22. Timers
    2.23. Thread
    2.24. Bottom halves, softirq
    2.25. Input Driver
    2.26. I2C Driver
    2.27. SPI Driver
    2.28. I2C driver user space
    2.29. PWM
    2.30. UART
    2.31. RTC
    2.32. Watchdog driver
    2.33. Regmap API
    2.34. IIO Driver
    2.35. USB Driver
    2.36. PCI Driver
    2.37. Block Driver
    2.38. Process Management
    2.39. RT Linux

3.) Linux Debugging
    3.1. Application Debugging
        3.1.1. Tracing
        3.1.2. Application Debugging using gdb
        3.1.3. Address sanitizer
        3.1.4. Thread Sanitizer
        3.1.5. Valgrind
        3.1.6. Segfault debugging
        3.1.7. Syslog
        3.1.8. DNS
        3.1.9. NTP
     3.2 Kernal Programming
        3.2.1. Network hardware (MAC and PHY)
        3.2.2. Network Drivers
        3.2.3. Stack Analysis and debugging
        3.2.4. ARP
        3.2.5. ICMP
        3.2.6. IPV4
        3.2.7. How to add new protocol? 

Total number of Planned classes - 6 months with each month having 8 classes - 48 classes
Total Number of Topics to cover - Around 108.
Average topic length - atleast 2 
       
